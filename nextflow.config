/*
 * ==================================================
 * EPSCoR-NASA Microbiome Pipeline configuration file
 * Version: v0.1
 * Author: Kanishka Manna & Hans Vasquez-Gross
 * Date: 2025-04-18
 * ==================================================
 */

/*
 * ---------------- Manifest information --------------- *
 */


/* 
 * ---------------- Define parameters ---------------- *
 */
params {

    // ----- Execution parameters ----- //
    help = false
    samplesheet = null
    output = "${baseDir}/results"
    database = "${baseDir}/database"
    force = false


    // ---------- Module specific parameters ---------- //
    // KneadData:
    kneaddata_db = "human_transcriptome:bowtie2,ribosomal_RNA:bowtie2"

    // MetaphlAn:


    // HUMAnN:
//    humann_nucleotide_db = "chocophlan:full"
//    humann_protein_db = "uniref:uniref90_diamond"
//    humann_pathway_db = "metacyc"

}



/*
 * --------------- Execution profiles for environments --------------- *
 */

profiles {

    // Local-workstation execution profile
    local {

        process.executor = 'local'
        conda.enabled = true
        conda.channels = ['defaults', 'conda-forge', 'bioconda', 'biobakery']
        conda.createTimeout = '20 min'
        
        process {

            withLabel: 'kneaddata_conda'    { conda = "assets/kneaddata.yaml" }
            withLabel: 'metaphlan_conda'    { conda = "assets/metaphlan.yaml" }
            withLabel: 'humann_conda'       { conda = "assets/humann.yaml" }
            withLabel: 'go_term_conda'      { conda = "assets/goterm.yaml" }
            withLabel: 'cpa_conda'          { conda = "assets/cpa.yaml" }
            withLabel: 'desc_conda'         { conda = "assets/desc.yaml" }
            withLabel: 'multiqc_conda'      { conda = "assets/multiqc.yaml" }

        }

        // Load `local.config` when running locally
        includeConfig 'conf/local.config'
    }


    
    // HPC execution profile
    cluster {
        process.executor = 'slurm'
        conda.enabled = true
        conda.channels = ['defaults', 'conda-forge', 'bioconda', 'biobakery']
        conda.createTimeout = '20 min'

        process {

           withLabel: 'kneaddata_conda'     { conda = "assets/kneaddata.yaml" }
           withLabel: 'metaphlan_conda'     { conda = "assets/metaphlan.yaml" }
           withLabel: 'humann_conda'        { conda = "assets/humann.yaml" }
           withLabel: 'go_term_conda'       { conda = "assets/goterm.yaml" }
           withLabel: 'cpa_conda'           { conda = "assets/cpa.yaml" }
           withLabel: 'desc_conda'          { conda = "assets/desc.yaml" }
           withLabel: 'multiqc_conda'       { conda = "assets/multiqc.yaml" }
        }

        // Load `cluster.config` when running on HPC
        includeConfig 'conf/cluster.config'
    }



    // Local execution profile using containers
    //test {
    //    process.executor = 'local'
    //    docker.enabled = true
    //    docker.runOptions = '--memory=32G -u \$(id -u):\$(id -g)'

    //    process {
    //        withLabel: 'kneaddata_docker' {
    //            container = "community.wave.seqera.io/library/fastqc_kneaddata:292d283c4c7b5157"
    //        }

    //        withLabel: 'metaphlan_docker' {
    //            container = "community.wave.seqera.io/library/metaphlan:4.2.2--644dc6928ffa70c6"
    //        }

    //        withLabel: 'humann_docker' {
    //            container = "community.wave.seqera.io/library/humann:3.9--b616b2952dd13a24"
    //        }

    //        withLabel: 'go_term_docker' {
    //            container = "docker.io/kmanna123/goterm:latest"
    //        }

    //        withLabel: 'cpa_docker' {
    //            container = "docker.io/kmanna123/cpa:latest"
    //        }

    //        withLabel: 'multiqc_docker' {
    //            container = "community.wave.seqera.io/library/multiqc:1.29--e3ef3b42c5f9f0da"
    //        }
    //    }

        // Load `base.config` when running locally
        //includeConfig 'conf/base.config'
    //    includeConfig 'conf/test.config'
    //}

}


/*
 * --------------- Global Shell settings --------------- *
 */
// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']



/*
=====================
    Help Message    
=====================
*/

params.help_message = """

        Usage:

        ```
        nextflow main.nf \\
            -profile <PROFILE> \\
            --samplesheet /path/to/INPUT.csv \\
            --output /path/to/OUTPUT_DIR \\
            --kneaddata_db REFERENCE_DB:BUILD \\
            --humann_nucleotide_db NUCLEOTIDE_DB:BUILD \\
            --humann_protein_db PROTEIN_DB:BUILD \\
            --humann_pathway_db PATHWAY_DB
        ```

        parameter options:
            * -profile : Specify the profile to use for running the pipeline in local or on the HPC. 
                This can be set to the following: 
                local: To run the pipeline on local machine, uses separate conda environment for each process.
                cluster: To run the pipeline on HPC, uses separate conda environment for each process.
            * --samplesheet : Path to a CSV file where each row specifies the sample name and the file paths to paired-end FASTQ files (R1 and R2), separated by commas.

            * --output : Path to the output directory where results will be saved.

            * --kneaddata_db : Comma seperated list with no spaces of databases for kneadata to use in database:build format  (default: human_transcriptome:bowtie2,ribosomal_RNA:bowtie2)
                    Possible options: 
                    human_transcriptome:bowtie2, ribosomal_RNA:bowtie2, mouse_C57BL:bowtie2, dog_genome:bowtie2, cat_genome:bowtie2, human_genome:bmtagger

                    There currently is a bug in the current kneaddata v0.12.2 release of kneaddata for human_genome:bowtie2. This will be fixed in 0.12.3.
                    You can manually create the "human_genome_bowtie2" directory and manually download the correct file here 
                    https://huttenhower.sph.harvard.edu/kneadData_databases/Homo_sapiens_hg39_T2T_Bowtie2_v0.1.tar.gz

                    and extract it into the kneaddata_path/human_genome_bowtie2 directory. The within that directory run the following command: touch .done
            
            * --humann_nucleotide_db : Comma separated list with no spaces of nucleotide databases for humann to use in database:build format (default: chocophlan:full)
                    Possible options:
                    chocophlan:full

            * --humann_protein_db : Comma separated list with no spaces of protein databases for humann to use in database:build format (default: uniref:uniref50_diamond)
                    Possible options:
                    uniref:uniref50_diamond, uniref:uniref90_diamond, uniref:uniref50_ec_filtered_diamond, uniref:uniref90_ec_filtered_diamond

            * --humann_pathway_db : Specify the database to use for pathway {metacyc, unipathways} computations (default: metacyc)
    """