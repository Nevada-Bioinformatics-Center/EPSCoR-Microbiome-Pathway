/*
 * ==================================================
 * EPSCoR-NASA Microbiome Pipeline configuration file
 * Version: v0.1
 * Author: Kanishka Manna & Hans Vasquez-Gross
 * Date: 2025-04-18
 * ==================================================
 */

/*
 * ---------------- Manifest information --------------- *
 */


/* 
 * ---------------- Define parameters ---------------- *
 */
params {

    // ----- Execution parameters ----- //
    help = false
    samplesheet = null
    output = "${baseDir}/results"


    // ---------- Module specific parameters ---------- //
    // KneadData:
    kneaddata_db = null
    //total resources used for 1 given kneaddata sample run, is kneaddata_threads x kneaddata_processes.
    //in the default case below 4 x 2 = 8 total threads
    //This is fine for local mode, but if you are running to a cluster, be sure to adjust the cluster settings for "high" to match.
    kneaddata_threads = 4
    kneaddata_processes = 2
    kneaddata_extra = ""

    // MetaphlAn:
    metaphlan_db = null
    metaphlan_nproc = 4
    metaphlan_extra = ""

    // HUMAnN:
    humann_nucleotide_db = null
    humann_protein_db = null
    humann_pathway_db = "metacyc"
    humann_threads = 4
    humann_extra = ""

    // GO-term:
    goterm_db = null

}



/*
 * --------------- Execution profiles for environments --------------- *
 */

profiles {

    // Local-workstation execution profile
    local {

        process.executor = 'local'
        conda.enabled = true
        conda.channels = ['defaults', 'conda-forge', 'bioconda', 'biobakery']
        conda.createTimeout = '20 min'
        
        process {

            withLabel: 'kneaddata_conda'    { conda = "assets/kneaddata.yaml" }
            withLabel: 'metaphlan_conda'    { conda = "assets/metaphlan.yaml" }
            withLabel: 'humann_conda'       { conda = "assets/humann.yaml" }
            withLabel: 'go_term_conda'      { conda = "assets/goterm.yaml" }
            withLabel: 'cpa_conda'          { conda = "assets/cpa.yaml" }
            withLabel: 'desc_conda'         { conda = "assets/desc.yaml" }
            withLabel: 'multiqc_conda'      { conda = "assets/multiqc.yaml" }

        }

        // Load `local.config` when running locally
        includeConfig 'conf/local.config'
    }


    
    // HPC execution profile
    cluster {
        process.executor = 'slurm'
        conda.enabled = true
        conda.channels = ['defaults', 'conda-forge', 'bioconda', 'biobakery']
        conda.createTimeout = '20 min'

        process {

           withLabel: 'kneaddata_conda'     { conda = "assets/kneaddata.yaml" }
           withLabel: 'metaphlan_conda'     { conda = "assets/metaphlan.yaml" }
           withLabel: 'humann_conda'        { conda = "assets/humann.yaml" }
           withLabel: 'go_term_conda'       { conda = "assets/goterm.yaml" }
           withLabel: 'cpa_conda'           { conda = "assets/cpa.yaml" }
           withLabel: 'desc_conda'          { conda = "assets/desc.yaml" }
           withLabel: 'multiqc_conda'       { conda = "assets/multiqc.yaml" }
        }

        // Load `cluster.config` when running on HPC
        includeConfig 'conf/cluster.config'
    }



    // Local execution profile using containers
    //test {
    //    process.executor = 'local'
    //    docker.enabled = true
    //    docker.runOptions = '--memory=32G -u \$(id -u):\$(id -g)'

    //    process {
    //        withLabel: 'kneaddata_docker' {
    //            container = "community.wave.seqera.io/library/fastqc_kneaddata:292d283c4c7b5157"
    //        }

    //        withLabel: 'metaphlan_docker' {
    //            container = "community.wave.seqera.io/library/metaphlan:4.2.2--644dc6928ffa70c6"
    //        }

    //        withLabel: 'humann_docker' {
    //            container = "community.wave.seqera.io/library/humann:3.9--b616b2952dd13a24"
    //        }

    //        withLabel: 'go_term_docker' {
    //            container = "docker.io/kmanna123/goterm:latest"
    //        }

    //        withLabel: 'cpa_docker' {
    //            container = "docker.io/kmanna123/cpa:latest"
    //        }

    //        withLabel: 'multiqc_docker' {
    //            container = "community.wave.seqera.io/library/multiqc:1.29--e3ef3b42c5f9f0da"
    //        }
    //    }

        // Load `base.config` when running locally
        //includeConfig 'conf/base.config'
    //    includeConfig 'conf/test.config'
    //}

}


/*
 * --------------- Global Shell settings --------------- *
 */
// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


/*
 * --------------- Nextflow related settings --------------- *
 */

// Cleaning up Nextflow's work directory
cleanup = true

// DAG
dag {
    enabled = true
    file = 'dag-<timestamp>.html'
    overwrite = true
}

// Execution report
report {
    enabled = true
    file = 'report-<timestamp>.html'
    overwrite = true
}

// Timeline
timeline {
    enabled = true
    overwrite = true
}

// Workflow
workflow {
    onComplete = {
        """
        Pipeline execution summary
        ---------------------------
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        Success     : ${workflow.success}
        workDir     : ${workflow.workDir}
        exit status : ${workflow.exitStatus}
        """.stripIndent()
    }
}


/*
=====================
    Help Message    
=====================
*/

params.help_message = """

        ------
        Usage:
        ------

        ```
        nextflow main.nf \\
            -profile <PROFILE> \\
            --samplesheet /PATH/to/INPUT.csv \\
            --output /PATH/to/OUTPUT_DIR \\
            --kneaddata_db /PATH/to/KneadData/Database \\
            --metaphlan_db /PATH/to/MetaPhlAn/Database
            --humann_nucleotide_db /PATH/to/HUMAnN/Nucleotide/Database \\
            --humann_protein_db /PATH/to/HUMAnN/Protein/Database \\
            --humann_pathway_db PATHWAY_DB \\
            --goterm_db /PATH/to/GOterms/Database
        ```

        ------------------
        parameter options:
        ------------------
            * -profile : Specify the profile to use for running the pipeline in local or on the HPC. 
                This can be set to the following: 
                local: To run the pipeline on local machine, uses separate conda environment for each process.
                cluster: To run the pipeline on HPC, uses separate conda environment for each process.

            * --samplesheet : Path to a CSV file where each row specifies the sample name and the file paths to paired-end FASTQ files (R1 and R2), separated by commas.

            * --output : Path to the output directory where results will be saved.

        // KneadData paramters:

            * --kneaddata_db : Path to the directory where the KneadData database is located.

            * --kneaddata_threads : Specify the number of threads. (DEFAULT: 4)

            * --kneaddata_processes : Specify the number of processes. (DEFAULT: 2)

            * --kneaddata_extra : User specified extra parameter option. (OPTIONAL)

        // MetaPhlAn parameters:

            * --metaphlan_db : Path to the directory where the MetaPhlAn database is located.

            * --metaphlan_nproc : Specify the number of processes. (DEFAULT: 4)

            * --metaphlan_extra : User specified extra parameter option. (OPTIONAL)
        
        // HUMAnN parameters:
            
            * --humann_nucleotide_db : Path to the directory where the HUMAnN Nucleotide database is located

            * --humann_protein_db : Path to the directory where the HUMAnN Protein database is located

            * --humann_pathway_db : Specify the database to use for pathway {metacyc, unipathways} computations (default: metacyc)

            * --humann_threads : Specify the number of threads. (DEFAULT: 4)

            * --humann_extra : User specified extra parameter option. (OPTIONAL)
        
        // GO-terms parameter:

            * --goterm_db : Path to the directory where the GOTerms Database will be downloaded/located.
    """
    .stripIndent()
